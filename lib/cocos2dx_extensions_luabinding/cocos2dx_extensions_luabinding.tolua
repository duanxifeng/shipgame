
$#include "CCScale9Sprite.h"
$#include "CCControl.h"
$#include "CCControlButton.h"
$#include "CCEditBox.h"

$using namespace cocos2d::extension;

class CCScale9Sprite : public CCNode
{
    CCSize getOriginalSize(void);

    CCSize getPreferredSize(void);
    void setPreferredSize(CCSize size);

    CCRect getCapInsets(void);
    void setCapInsets(CCRect capInsets);

    unsigned char getOpacity(void);
    void setOpacity(unsigned char opacity);

    CCScale9Sprite* resizableSpriteWithCapInsets(CCRect capInsets);
    static CCScale9Sprite* create();
    void setSpriteFrame(CCSpriteFrame * spriteFrame);

    static CCScale9Sprite* create(const char* file, CCRect rect,  CCRect capInsets);
    static CCScale9Sprite* create(const char* file, CCRect rect);
    static CCScale9Sprite* create(CCRect capInsets, const char* file);
    static CCScale9Sprite* create(const char* file);
    static CCScale9Sprite* createWithSpriteFrame(CCSpriteFrame* spriteFrame, CCRect capInsets);
    static CCScale9Sprite* createWithSpriteFrame(CCSpriteFrame* spriteFrame);
    static CCScale9Sprite* createWithSpriteFrameName(const char*spriteFrameName, CCRect capInsets);
    static CCScale9Sprite* createWithSpriteFrameName(const char*spriteFrameName);
};

enum CCControlState
{
    CCControlStateNormal       = 1 << 0,
    CCControlStateHighlighted  = 1 << 1,
    CCControlStateDisabled     = 1 << 2,
    CCControlStateSelected     = 1 << 3
};

class CCControl : public CCLayer
{
    CCControlState getState();

    unsigned char getOpacity(void);
    void setOpacity(unsigned char opacity);

    void setEnabled(bool bEnabled);
    bool isEnabled();
    void setSelected(bool bSelected);
    bool isSelected();
    void setHighlighted(bool bHighlighted);
    bool isHighlighted();
    bool hasVisibleParents();
    void needsLayout();
};

class CCControlButton : public CCControl
{
    bool doesAdjustBackgroundImage();
    void setAdjustBackgroundImage(bool adjustBackgroundImage);

    CCNode* getTitleLabel(void);
    void setTitleLabel(CCNode* titleLabel);

    CCScale9Sprite* getBackgroundSprite(void);
    void setBackgroundSprite(CCScale9Sprite* backgroundSprite);

    CCSize getPreferredSize(void);
    void setPreferredSize(CCSize size);

    bool getZoomOnTouchDown(void);
    void setZoomOnTouchDown(bool zoom);

    CCPoint getLabelAnchorPoint(void);
    void setLabelAnchorPoint(CCPoint point);

    bool isPushed(void);

    int getVerticalMargin(void);
    int getHorizontalOrigin(void);
    void setMargins(int marginH, int marginV);

    static CCControlButton* create(CCNode* label, CCScale9Sprite* backgroundSprite);
    static CCControlButton* create(std::string title, const char * fontName, float fontSize);
    static CCControlButton* create(CCScale9Sprite* sprite);
    static CCControlButton* create();

    CCString* getTitleForState(CCControlState state);
    void setTitleForState(CCString* title, CCControlState state);
    ccColor3B getTitleColorForState(CCControlState state);
    void setTitleColorForState(ccColor3B color, CCControlState state);

    CCNode* getTitleLabelForState(CCControlState state);
    void setTitleLabelForState(CCNode* label, CCControlState state);

    void setTitleTTFForState(const char * fntFile, CCControlState state);
    const char * getTitleTTFForState(CCControlState state);

    void setTitleTTFSizeForState(float size, CCControlState state);
    float getTitleTTFSizeForState(CCControlState state);

    void setTitleBMFontForState(const char * fntFile, CCControlState state);
    const char * getTitleBMFontForState(CCControlState state);

    CCScale9Sprite* getBackgroundSpriteForState(CCControlState state);
    void setBackgroundSpriteForState(CCScale9Sprite* sprite, CCControlState state);
    void setBackgroundSpriteFrameForState(CCSpriteFrame * spriteFrame, CCControlState state);
};

enum KeyboardReturnType {
    kKeyboardReturnTypeDefault = 0,
    kKeyboardReturnTypeDone,
    kKeyboardReturnTypeSend,
    kKeyboardReturnTypeSearch,
    kKeyboardReturnTypeGo
};

/**
 * \brief The EditBoxInputMode defines the type of text that the user is allowed
 * to enter.
 */
enum EditBoxInputMode
{
    /**
     * The user is allowed to enter any text, including line breaks.
     */
    kEditBoxInputModeAny = 0,

    /**
     * The user is allowed to enter an e-mail address.
     */
    kEditBoxInputModeEmailAddr,

    /**
     * The user is allowed to enter an integer value.
     */
    kEditBoxInputModeNumeric,

    /**
     * The user is allowed to enter a phone number.
     */
    kEditBoxInputModePhoneNumber,

    /**
     * The user is allowed to enter a URL.
     */
    kEditBoxInputModeUrl,

    /**
     * The user is allowed to enter a real number value.
     * This extends kEditBoxInputModeNumeric by allowing a decimal point.
     */
    kEditBoxInputModeDecimal,

    /**
     * The user is allowed to enter any text, except for line breaks.
     */
    kEditBoxInputModeSingleLine
};

/**
 * \brief The EditBoxInputFlag defines how the input text is displayed/formatted.
 */
enum EditBoxInputFlag
{
    /**
     * Indicates that the text entered is confidential data that should be
     * obscured whenever possible. This implies EDIT_BOX_INPUT_FLAG_SENSITIVE.
     */
    kEditBoxInputFlagPassword = 0,

    /**
     * Indicates that the text entered is sensitive data that the
     * implementation must never store into a dictionary or table for use
     * in predictive, auto-completing, or other accelerated input schemes.
     * A credit card number is an example of sensitive data.
     */
    kEditBoxInputFlagSensitive,

    /**
     * This flag is a hint to the implementation that during text editing,
     * the initial letter of each word should be capitalized.
     */
    kEditBoxInputFlagInitialCapsWord,

    /**
     * This flag is a hint to the implementation that during text editing,
     * the initial letter of each sentence should be capitalized.
     */
    kEditBoxInputFlagInitialCapsSentence,

    /**
     * Capitalize all characters automatically.
     */
    kEditBoxInputFlagInitialCapsAllCharacters
};

// ----------------------------------------

/**
 * \brief Class for edit box.
 *
 * You can use this widget to gather small amounts of text from the user.
 *
 */
class CCEditBox : public CCControlButton
{
    /**
     * create a edit box with size.
     * @return An autorelease pointer of CCEditBox, you don't need to release it only if you retain it again.
     */
    static CCEditBox* create(const CCSize& size, CCScale9Sprite* pNormal9SpriteBg, CCScale9Sprite* pPressed9SpriteBg = NULL, CCScale9Sprite* pDisabled9SpriteBg = NULL);

    /**
     * Registers a script function that will be called for EditBox events.
     * 
     * This handler will be removed automatically after onExit() called.
     * @code
     * -- lua sample
     * local function editboxEventHandler(eventType)
     *     if eventType == "began" then
     *         -- triggered when an edit box gains focus after keyboard is shown
     *     elseif eventType == "ended" then
     *         -- triggered when an edit box loses focus after keyboard is hidden.
     *     elseif eventType == "changed" then
     *         -- triggered when the edit box text was changed.
     *     elseif eventType == "return" then
     *         -- triggered when the return button was pressed or the outside area of keyboard was touched.
     *     end
     * end
     * 
     * local editbox = CCEditBox:create(CCSize(...), CCScale9Sprite:create(...))
     * editbox = registerScriptEditBoxHandler(editboxEventHandler)
     * @endcode
     *
     * @param handler A number that indicates a lua function. 
     */
    void registerScriptEditBoxHandler(LUA_FUNCTION handler);
    void unregisterScriptEditBoxHandler(void);

    /**
     * Set the text entered in the edit box.
     * @param pText The given text.
     */
    void setText(const char* pText);
    
    /**
     * Get the text entered in the edit box.
     * @return The text entered in the edit box.
     */
    const char* getText(void);
    
    /**
     * Set the font color of the widget's text.
     */
    void setFontColor(const ccColor3B& color);
    
    /**
     * Set the font color of the placeholder text when the edit box is empty.
     * Not supported on IOS.
     */
    void setPlaceholderFontColor(const ccColor3B& color);
    
    /**
     * Set a text in the edit box that acts as a placeholder when an
     * edit box is empty.
     * @param pText The given text.
     */
    void setPlaceHolder(const char* pText);
    
    /**
     * Get a text in the edit box that acts as a placeholder when an
     * edit box is empty.
     */
    const char* getPlaceHolder(void);
    
    /**
     * Set the input mode of the edit box.
     * @param inputMode One of the EditBoxInputMode constants.
     */
    void setInputMode(EditBoxInputMode inputMode);
    
    /**
     * Sets the maximum input length of the edit box.
     * Setting this value enables multiline input mode by default.
     * Available on Android, iOS and Windows Phone.
     *
     * @param maxLength The maximum length.
     */
    void setMaxLength(int maxLength);
    
    /**
     * Gets the maximum input length of the edit box.
     *
     * @return Maximum input length.
     */
    int getMaxLength();
    
    /**
     * Set the input flags that are to be applied to the edit box.
     * @param inputFlag One of the EditBoxInputFlag constants.
     */
    void setInputFlag(EditBoxInputFlag inputFlag);
    
    /**
     * Set the return type that are to be applied to the edit box.
     * @param returnType One of the CCKeyboardReturnType constants.
     */
    void setReturnType(KeyboardReturnType returnType);
};
